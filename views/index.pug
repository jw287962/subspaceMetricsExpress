doctype html
html(lang="en")
  head
    link(rel="stylesheet" type="text/css" href="/styles.css")
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Node Status
    script.
      function refreshMetricsData() {
        fetch('/api/refresh')
          .then(response => response.json())
          .then(data => {
            console.log('Data refreshed:', data);
            updateStatus = "Success"
            window.location.reload(); // Example: Reload the page after data is refreshed
          })
          .catch(error => {
            console.error('Error refreshing data:', error);
            updateStatus = "Error"
          });
      }

  body
    h1 Node Status
      button(type="button", onclick="refreshMetricsData()") &#x21bb
    if updateStatus
      p Updated: #{updateStatus}
    if nodeDisplayData
      .node-status.center.header
        h3#orange Tssc Bal: #{walletBalance}
        h3#blue Node Status: 
          div(id=nodeDisplayData.nodeIsRunningOk ? 'green' : 'red') 
            | #{nodeDisplayData.nodeIsRunningOk ? '✔': '✘'}
          div#black #{nodeDisplayData.nodeIp}
        h3#blue  Synced: 
          div#black #{nodeDisplayData.nodeSyncState ? 'Yes' : 'No'}
        h3  Peers: #{nodeDisplayData.nodePeersConnected}

    //- hr
    div.all-status
      each pc in farmerDisplaySector
        .farmer-status
          p.center Name: #{pc.SummaryData.Name}
          p(id=pc.SummaryData.FarmerIsRunning ? 'green' : 'red') &nbsp  ✔ #{pc.SummaryData.Uptime.FormattedTime}
              
    each pc in farmerDisplaySector
      .farmer-details
        div.center.header
          h3.center Name: #{pc.SummaryData.Name}
          h3 Hostname: #{pc.SummaryData.FarmerIp}
        div.line1
            p(id=pc.SummaryData.FarmerIsRunning ? 'green' : 'red') Status: ✔ #{pc.SummaryData.Uptime.FormattedTime}
        div.line2
          div.row
            p.border Sector Time: #{pc.SummaryData.TotalSectorTime.formattedSectorTime} 
            p #{pc.SummaryData.TotalSectorsPerHour.toFixed(2)} Sectors per Hr
          div.row
            p.border Rewards: #{pc.SummaryData.TotalRewards} total
            p.border #{pc.SummaryData.TotalRewardsPerHour} per Hr
            p #{(pc.SummaryData.TotalRewardsPerHour * 24).toFixed(2)} per Day
          div.row
            p.border Remain: #{pc.SummaryData.TotalETA}
            p #{pc.SummaryData.TotalPercentComplete}% Complete 
          div.row
            p Size: #{pc.SummaryData.TotalDiskSize}TiB 
            p Miss: #{(pc.SummaryData.TotalMisses/(pc.SummaryData.TotalRewards+pc.SummaryData.TotalMisses)*100).toFixed(2)}%
        div.tablediv
          table
            thead
              tr
                //- th.disk-Id Disk Id
                th.Size Size(TB)
                th.Percent-Complete % Comp
                th.ETA ETA(Days)
                th.Sectors-Hr Sectors/Hr
                th.Min-Sector Min/Sector
                th.Reward Reward
                th.Miss T/R/Miss
                th.Miss Miss %
                th.Expired Expired/AboutToExpire

              each ind in pc.IndividualDiskDataObj
                tr  
                  //- td.disk-id #{ind.Id}
                  td= ind.Data.DiskSize 
                  td= ind.Data.CompletePercent 
                  td= ind.Data.ETA
                  td= ind.Performance.SectorsPerHour 
                  td= ind.Performance.SectorTime
                  td= ind.Rewards.Rewards
                  td #{ind.Misses.Total}/ #{ind.Misses.Rejected}/#{ind.Misses.Misses}
                  td #{(ind.Misses.Total/(ind.Misses.Total+ind.Rewards.Rewards)*100).toFixed(2)}%
                  td #{ind.Expired.Sectors}/ #{ind.AboutToExpire.Sectors}

