doctype html
html(lang="en")
  head
    link(rel="stylesheet" type="text/css" href="/styles.css")
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Node Status
    script.
      let timeToRefresh = #{timeToRefresh};
      let resetTimer = #{resetTimer};

      function refreshMetricsData() {
        fetch('/api/refresh')
          .then(response => response.json())
          .then(data => {
            console.log('Data refreshed:', data);
            updateStatus = "Success"
            window.location.reload(); // Example: Reload the page after data is refreshed
          })
          .catch(error => {
            console.error('Error refreshing data:', error);
            updateStatus = "Error"
          });
      }
      setInterval(function(){
        timeToRefresh--;
        if(timeToRefresh <=0){
        window.location.reload();
        timer=resetTimer
        }
         document.getElementById('timer').textContent = timeToRefresh;
      },1000)
      function showData(index){
        const elem = document.querySelector(`#farmerStatus${index}`)
        elem.classList.toggle('hidden')
      }

  body
    h1 Node Status
      button(type="button", onclick="refreshMetricsData()") &#x21bb
    h3 Tssc Bal: #{walletBalance} | Timer:
      span(id="timer") #{timeToRefresh}
    div.all-status
      if updateStatus
        p Updated: #{updateStatus}
      each data in nodeDisplayData
        if data
          .node-status.center.header
            h3#blue Node Status: 
              div(id=data.nodeIsRunningOk ? 'green' : 'red') 
                | #{data.nodeIsRunningOk ? 'âœ”': 'âœ˜'}
              div#black #{data.nodeIp}
            h3#blue  Synced: 
              div#black #{data.nodeSyncState ? 'Yes' : 'No'}
            h3  Peers: #{data.nodePeersConnected}

    //- hr
    div.all-status
      each pc,index in farmerDisplaySector
        div.farmer-status(onclick=`showData(${index})`)
          div.row
            div.row.farmersummarydata.name #{pc.SummaryData.Name}
          div.row.farmersummary
            if pc.SummaryData.FarmerIsRunning && pc.SummaryData.ERROR == ""
              div.row.farmersummarydata#uptime
                p#blue &nbsp; âœ” 
                p #{pc.SummaryData.Uptime.FormattedTime}
            else 
              p#red &nbsp; âœ˜ #{pc.SummaryData.Uptime.FormattedTime}
            div.row.farmersummarydata +#{pc.SummaryData.TotalRewardsPerTB} /TB 
            div.row.farmersummarydata 
              p#green +#{pc.SummaryData.TotalRewards}
              p.spacing /
              p#red #{pc.SummaryData.TotalMisses}
            div.row.farmersummarydata #{pc.SummaryData.TotalDiskSize} Tib
            div.row.farmersummarydata 
              p #{pc.SummaryData.TotalExpired.Expired}ðŸ’€
              p.spacing /
              p #{pc.SummaryData.TotalExpired.AboutToExpire}
            div.row.farmersummarydata 
              p #{pc.SummaryData.TotalSectorTime.formattedSectorTime}
          div.arrow âŒ„
        

        .farmer-details.hidden(id=`farmerStatus${index}`)
          //- div.line1
          div.line2
            div.row
              h3 Hostname: #{pc.SummaryData.FarmerIp}
            div.row
              p Sectors/Hr: 
              p #{pc.SummaryData.TotalSectorsPerHour.toFixed(2)}
            div.row
              p Rewards: 
              p #{pc.SummaryData.TotalRewards} |
              //- p.border #{pc.SummaryData.TotalRewardsPerHour} per Hr
              p.border #{(pc.SummaryData.TotalRewardsPerHour * 24).toFixed(2)} per Day
              p #{pc.SummaryData.TotalRewardsPerTB} per TB
            div.row
              p Remain:
              p #{pc.SummaryData.TotalETA}
              p #{pc.SummaryData.TotalPercentComplete}% Complete 
            div.row
              p Miss: #{(pc.SummaryData.TotalMisses/(pc.SummaryData.TotalRewards+pc.SummaryData.TotalMisses)*100).toFixed(2)}%
          div.tablediv
            table
              thead
                tr
                  //- th.disk-Id Disk Id
                  th.Size Size(TB)
                  th.Percent-Complete % Comp
                  th.Reward Reward
                  th.Miss T/R/Miss
                  th.Miss Miss %
                  th.ETA ETA(Days)
                  th.Sectors-Hr Sectors/Hr
                  th.Min-Sector Min/Sector
                  th.Expired Expired/AboutToExpire

                each ind in pc.IndividualDiskDataObj
                  tr  
                    //- td.disk-id #{ind.Id}
                    td= ind.Data.DiskSize 
                    td #{ind.Data.CompletePercent}%
                    td +#{ind.Rewards.Rewards}
                    td - #{ind.Misses.Total}/ #{ind.Misses.Rejected}/#{ind.Misses.Misses}
                    td #{(ind.Misses.Total/(ind.Misses.Total+ind.Rewards.Rewards)*100).toFixed(2)}%
                    td= ind.Data.ETA
                    td= ind.Performance.SectorsPerHour 
                    td= ind.Performance.SectorTime
                    td #{ind.Expired.Sectors}/ #{ind.AboutToExpire.Sectors}
      

